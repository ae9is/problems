package main

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestIsValidSudoku(t *testing.T) {
	validBoards := [][][]byte{{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}, {
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	}, {
		{'a', 'b', 'c', 'd'},
		{'c', 'd', '.', 'b'},
		{'b', 'a', 'd', 'c'},
		{'d', 'c', 'b', 'a'},
	}}
	invalidBoards := [][][]byte{{
		{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}, {
		{'a', 'b', 'c', 'd'},
		{'c', 'a', 'd', 'b'},
		{'b', '.', 'a', 'c'},
		{'d', 'c', 'b', 'a'},
	}}
	t.Run("valid board validates", func(t *testing.T) {
		t.Log("Valid board:")
		validate(true, t, validBoards...)
	})
	t.Run("invalid board invalidates", func(t *testing.T) {
		t.Log("Invalid board:")
		validate(false, t, invalidBoards...)
	})
}

func validate(expected bool, t *testing.T, boards ...[][]byte) {
	for _, board := range boards {
		var status string
		valid := isValidSudoku(board)
		if valid {
			status = ""
		} else {
			status = " not"
		}
		t.Logf("Board is%v a valid sudoku\n", status)
		msg := fmt.Sprintf("Expected isValidSudoku to be %v", expected)
		require.Equal(t, expected, valid, msg)
	}
}
